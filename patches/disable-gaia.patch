# Disables Gaia code
# Somehow it is still activated even without being signed-in: https://github.com/Eloston/ungoogled-chromium/issues/104

--- a/chrome/browser/browser_resources.grd
+++ b/chrome/browser/browser_resources.grd
@@ -173,7 +173,6 @@
       <include name="IDR_INLINE_LOGIN_HTML" file="resources\inline_login\inline_login.html" compress="gzip" flattenhtml="true" allowexternalscript="true" type="BINDATA" preprocess="true" />
       <include name="IDR_INLINE_LOGIN_CSS" file="resources\inline_login\inline_login.css" compress="gzip" flattenhtml="true" type="BINDATA" preprocess="true" />
       <include name="IDR_INLINE_LOGIN_JS" file="resources\inline_login\inline_login.js" compress="gzip" flattenhtml="true" type="BINDATA" />
-      <include name="IDR_GAIA_AUTH_AUTHENTICATOR_JS" file="resources\gaia_auth_host\authenticator.js" compress="gzip" flattenhtml="true" type="BINDATA" />
 
       <include name="IDR_INSPECT_CSS" file="resources\inspect\inspect.css" compress="gzip" flattenhtml="true" type="BINDATA" />
       <include name="IDR_INSPECT_HTML" file="resources\inspect\inspect.html" compress="gzip" flattenhtml="true" allowexternalscript="true" type="BINDATA" />
--- a/chrome/browser/ui/webui/signin/inline_login_ui.cc
+++ b/chrome/browser/ui/webui/signin/inline_login_ui.cc
@@ -52,7 +52,6 @@ content::WebUIDataSource* CreateWebUIDat
 
   source->AddResourcePath("inline_login.css", IDR_INLINE_LOGIN_CSS);
   source->AddResourcePath("inline_login.js", IDR_INLINE_LOGIN_JS);
-  source->AddResourcePath("gaia_auth_host.js", IDR_GAIA_AUTH_AUTHENTICATOR_JS);
 
   source->AddLocalizedString("title", IDS_CHROME_SIGNIN_TITLE);
   source->AddLocalizedString(
--- a/google_apis/gaia/gaia_auth_fetcher.cc
+++ b/google_apis/gaia/gaia_auth_fetcher.cc
@@ -296,64 +296,6 @@ void GaiaAuthFetcher::CreateAndStartGaia
     network::mojom::CredentialsMode credentials_mode,
     const net::NetworkTrafficAnnotationTag& traffic_annotation) {
   DCHECK(!fetch_pending_) << "Tried to fetch two things at once!";
-
-  auto resource_request = std::make_unique<network::ResourceRequest>();
-  resource_request->url = gaia_gurl;
-  original_url_ = gaia_gurl;
-
-  if (credentials_mode != network::mojom::CredentialsMode::kOmit) {
-    DCHECK_EQ(GaiaUrls::GetInstance()->gaia_url(), gaia_gurl.GetOrigin())
-        << gaia_gurl;
-    resource_request->site_for_cookies = GaiaUrls::GetInstance()->gaia_url();
-    url::Origin origin =
-        url::Origin::Create(GaiaUrls::GetInstance()->gaia_url());
-    resource_request->trusted_params =
-        network::ResourceRequest::TrustedParams();
-    resource_request->trusted_params->network_isolation_key =
-        net::NetworkIsolationKey(origin, origin);
-  }
-
-  if (!body.empty())
-    resource_request->method = "POST";
-
-  if (!headers.empty())
-    resource_request->headers.AddHeadersFromString(headers);
-
-  // The Gaia token exchange requests do not require any cookie-based
-  // identification as part of requests.  We suppress sending any cookies to
-  // maintain a separation between the user's browsing and Chrome's internal
-  // services.  Where such mixing is desired (MergeSession or OAuthLogin), it
-  // will be done explicitly.
-  resource_request->credentials_mode = credentials_mode;
-
-  url_loader_ = network::SimpleURLLoader::Create(std::move(resource_request),
-                                                 traffic_annotation);
-  if (!body.empty()) {
-    DCHECK(!body_content_type.empty());
-    url_loader_->AttachStringForUpload(body, body_content_type);
-  }
-
-  url_loader_->SetAllowHttpErrorResults(true);
-
-  VLOG(2) << "Gaia fetcher URL: " << gaia_gurl.spec();
-  VLOG(2) << "Gaia fetcher headers: " << headers;
-  VLOG(2) << "Gaia fetcher body: " << body;
-
-  // Fetchers are sometimes cancelled because a network change was detected,
-  // especially at startup and after sign-in on ChromeOS. Retrying once should
-  // be enough in those cases; let the fetcher retry up to 3 times just in case.
-  // http://crbug.com/163710
-  url_loader_->SetRetryOptions(
-      3, network::SimpleURLLoader::RETRY_ON_NETWORK_CHANGE);
-
-  fetch_pending_ = true;
-
-  // Unretained is OK below as |url_loader_| is owned by this.
-  url_loader_->DownloadToString(
-      url_loader_factory_.get(),
-      base::BindOnce(&GaiaAuthFetcher::OnURLLoadComplete,
-                     base::Unretained(this)),
-      kMaxMessageSize);
 }
 
 // static
